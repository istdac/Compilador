/* The following code was generated by JFlex 1.4.3 on 5/10/21 22:14 */

package Main;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/10/21 22:14 from the specification file
 * <tt>C:/Users/Edgar Valderrama/Documents/TEC/LYA2/Projectos_Java/Compilador/src/Main/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\11\2\0\1\3\22\0\1\3\1\71\1\0\1\10"+
    "\2\0\1\76\1\12\1\100\1\101\1\74\1\72\1\6\1\73\1\5"+
    "\1\75\12\2\1\106\1\7\1\70\1\66\1\67\2\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\63\1\45\1\13\1\17\2\1\1\53\1\56"+
    "\1\41\1\37\1\26\1\1\1\36\1\47\1\43\1\60\1\1\1\61"+
    "\3\1\1\102\1\0\1\103\1\0\1\1\1\0\1\23\1\35\1\46"+
    "\1\52\1\16\1\55\1\54\1\50\1\21\1\40\1\57\1\24\1\15"+
    "\1\20\1\14\1\44\1\1\1\27\1\4\1\22\1\51\1\62\1\42"+
    "\1\64\1\65\1\25\1\104\1\77\1\105\123\0\1\106\37\0\1\106"+
    "\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\4\1\10\23\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\14\1\0\1\27\1\30\1\27\1\1"+
    "\2\0\1\31\3\2\1\32\3\2\1\33\13\2\1\34"+
    "\26\2\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\2\31\10\2\1\50\20\2"+
    "\1\51\1\2\1\52\1\53\7\2\1\54\13\2\1\55"+
    "\3\2\1\46\1\56\1\57\1\2\1\60\11\2\1\61"+
    "\3\2\1\62\5\2\1\63\1\64\2\2\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\6\2\1\73\1\2\1\74"+
    "\2\2\1\75\6\2\1\76\4\2\1\77\1\100\1\101"+
    "\1\102\1\2\1\103\1\104\1\2\1\105\13\2\1\106"+
    "\3\2\1\107\2\2\1\110\1\111\1\2\1\112\1\2"+
    "\1\113\1\114\1\115\3\2\1\116\3\2\1\117\1\2"+
    "\1\120\1\121\6\2\1\122\2\2\1\123\1\124\1\2"+
    "\1\125\2\2\1\126\2\2\1\127\1\130\1\131\1\132"+
    "\1\2\1\133\6\2\1\134\1\2\1\135\2\2\1\136"+
    "\1\137\1\140\1\2\1\141\4\2\1\142\1\143\1\144"+
    "\1\145\1\2\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3"+
    "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\u0899\0\u08e0\0\u0927\0\u01aa\0\u01aa\0\u096e\0\u09b5"+
    "\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0238\0\u0b18\0\u01aa\0\u0b5f"+
    "\0\u0ba6\0\u0bed\0\216\0\u0c34\0\u0c7b\0\u0cc2\0\216\0\u0d09"+
    "\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\216\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa"+
    "\0\107\0\107\0\u1630\0\u1677\0\107\0\u16be\0\u1705\0\u174c"+
    "\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\216\0\u193d"+
    "\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\216"+
    "\0\u1dad\0\216\0\216\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10"+
    "\0\u1f57\0\u1f9e\0\216\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\216\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\216\0\216\0\u240e\0\216\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d"+
    "\0\216\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e"+
    "\0\u28c5\0\u290c\0\216\0\216\0\u2953\0\u299a\0\216\0\216"+
    "\0\216\0\216\0\216\0\216\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6"+
    "\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\216\0\u2c19\0\u2c60\0\216"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\216\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\216\0\216\0\216\0\216\0\u2f6d"+
    "\0\216\0\216\0\u2fb4\0\216\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\216"+
    "\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\216\0\216"+
    "\0\u34b2\0\216\0\u34f9\0\216\0\216\0\216\0\u3540\0\u3587"+
    "\0\u35ce\0\216\0\u3615\0\u365c\0\u36a3\0\216\0\u36ea\0\216"+
    "\0\216\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\216"+
    "\0\u38db\0\u3922\0\u3969\0\216\0\u39b0\0\216\0\u39f7\0\u3a3e"+
    "\0\216\0\u3a85\0\u3acc\0\216\0\216\0\216\0\216\0\u3b13"+
    "\0\216\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\216"+
    "\0\u3d04\0\216\0\u3d4b\0\u3d92\0\216\0\216\0\216\0\u3dd9"+
    "\0\216\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\216\0\216\0\216"+
    "\0\216\0\u3f3c\0\216";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\14\3\3\1\15\6\3\1\16"+
    "\1\3\1\17\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\25\1\3\1\26\1\3\1\27\1\3\1\30\1\3"+
    "\1\31\3\3\1\32\2\3\1\33\1\3\1\34\1\35"+
    "\1\3\1\36\2\3\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\3\2\1\0\5\2\1\0"+
    "\76\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\53\3\10\60\2\2\7\60\1\2\1\61\1\4\1\0"+
    "\1\61\1\62\2\60\1\2\1\0\1\60\3\61\1\63"+
    "\15\61\1\63\31\61\10\60\2\2\7\60\3\0\2\5"+
    "\4\0\1\5\75\0\1\2\2\3\1\5\1\6\3\60"+
    "\1\2\1\5\1\60\53\3\10\60\2\2\7\60\1\2"+
    "\2\60\1\0\4\60\1\2\1\0\64\60\2\2\7\60"+
    "\11\12\1\0\75\12\1\64\2\65\1\66\3\65\1\60"+
    "\1\64\1\66\1\67\63\65\2\64\7\65\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\1\3\1\70"+
    "\51\3\10\60\2\2\7\60\1\2\2\3\1\0\1\71"+
    "\3\60\1\2\1\0\1\60\5\3\1\72\34\3\1\73"+
    "\10\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\1\3\1\74\12\3\1\75"+
    "\36\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\11\3\1\76\21\3\1\77"+
    "\17\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\1\3\1\100\51\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\1\3\1\101\6\3\1\102\1\103\41\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\1\3\1\104\1\3\1\105\2\3"+
    "\1\106\44\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\5\3\1\107\3\3"+
    "\1\110\41\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\1\3\1\111\1\3"+
    "\1\112\47\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\5\3\1\113\14\3"+
    "\1\114\6\3\1\115\10\3\1\116\10\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\3\3\1\117\47\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\3\3"+
    "\1\120\10\3\1\121\20\3\1\122\15\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\3\3\1\123\47\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\2\3"+
    "\1\124\1\125\3\3\1\126\1\127\24\3\1\130\15\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\1\3\1\131\4\3\1\132\44\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\1\3\1\133\51\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\5\3\1\134\45\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\6\3"+
    "\1\135\26\3\1\136\15\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\1\3"+
    "\1\137\6\3\1\140\1\141\41\3\10\60\2\2\7\60"+
    "\1\2\2\60\1\0\4\60\1\2\1\0\54\60\1\142"+
    "\1\143\6\60\2\2\7\60\1\2\2\60\1\0\4\60"+
    "\1\2\1\0\54\60\1\144\7\60\2\2\7\60\1\2"+
    "\2\60\1\0\4\60\1\2\1\0\54\60\1\145\7\60"+
    "\2\2\7\60\1\2\2\60\1\0\4\60\1\2\1\0"+
    "\54\60\1\146\7\60\2\2\7\60\1\2\2\60\1\0"+
    "\4\60\1\2\1\0\60\60\1\147\3\60\2\2\7\60"+
    "\1\2\2\60\1\0\4\60\1\2\1\0\61\60\1\150"+
    "\2\60\2\2\7\60\3\2\1\0\5\2\1\0\64\2"+
    "\1\151\13\2\1\0\5\2\1\0\65\2\1\152\10\2"+
    "\2\61\1\0\1\61\3\60\1\2\1\0\1\60\53\61"+
    "\10\60\2\2\7\60\1\2\1\60\1\62\1\0\4\60"+
    "\1\2\1\0\4\60\1\153\15\60\1\153\41\60\2\2"+
    "\7\60\1\2\2\61\1\0\1\61\3\60\1\2\1\0"+
    "\1\60\53\61\4\60\2\154\2\60\2\2\7\60\3\64"+
    "\1\66\3\64\1\2\1\64\1\66\1\155\74\64\7\66"+
    "\1\0\2\66\1\156\74\66\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\2\3\1\157\50\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\4\3\1\160\12\3\1\161\4\3\1\162"+
    "\13\3\1\163\2\3\1\164\1\3\1\165\5\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\6\3\1\166\1\167\43\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\14\3\1\170\36\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\1\3"+
    "\1\171\51\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\10\3\1\172\42\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\1\3\1\173\51\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\11\3\1\174\41\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\2\3"+
    "\1\175\50\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\1\3\1\176\51\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\1\3\1\177\51\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\11\3\1\200\30\3\1\201\4\3\1\202\3\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\203\3\60"+
    "\1\2\1\0\1\60\53\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\10\3"+
    "\1\204\42\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\205\3\60\1\2\1\0\1\60\53\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\1\3\1\206\51\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\33\3"+
    "\1\207\17\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\25\3\1\210\25\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\3\3\1\211\47\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\42\3\1\212\10\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\27\3"+
    "\1\213\23\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\2\3\1\214\46\3"+
    "\1\215\1\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\36\3\1\216\14\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\3\3\1\217\2\3\1\220\44\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\7\3\1\221\43\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\10\3\1\222\42\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\7\3"+
    "\1\223\43\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\1\3\1\224\6\3"+
    "\1\225\42\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\47\3\1\226\3\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\36\3\1\227\14\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\33\3\1\230\17\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\41\3"+
    "\1\231\11\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\47\3\1\232\3\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\11\3\1\233\41\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\5\3\1\234\45\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\3\3"+
    "\1\235\2\3\1\236\44\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\14\3"+
    "\1\237\36\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\11\3\1\240\21\3"+
    "\1\241\17\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\1\3\1\242\51\3"+
    "\10\60\2\2\7\60\1\2\1\60\1\243\1\0\4\60"+
    "\1\2\1\0\60\60\2\243\2\60\2\2\7\60\1\2"+
    "\1\60\1\154\1\0\4\60\1\2\1\0\64\60\2\2"+
    "\7\60\107\0\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\3\3\1\244\47\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\5\3\1\245\45\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\11\3\1\246"+
    "\41\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\5\3\1\247\23\3\1\250"+
    "\4\3\1\251\14\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\1\3\1\252"+
    "\51\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\1\3\1\253\51\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\5\3\1\254\45\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\7\3\1\255\43\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\7\3\1\256"+
    "\43\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\41\3\1\257\11\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\14\3\1\260\36\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\11\3\1\261\41\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\1\3\1\262"+
    "\51\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\3\3\1\263\47\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\264\3\60\1\2"+
    "\1\0\1\60\53\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\14\3\1\265"+
    "\36\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\3\3\1\266\47\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\10\3\1\267\42\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\6\3\1\270\44\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\31\3\1\271"+
    "\21\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\22\3\1\272\30\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\3\3\1\273\47\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\2\3\1\274\50\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\1\3\1\275"+
    "\1\3\1\276\47\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\5\3\1\277"+
    "\45\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\31\3\1\300\21\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\7\3\1\301\43\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\3\3\1\302\47\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\5\3\1\303"+
    "\45\3\10\60\2\2\7\60\1\2\2\3\1\0\1\304"+
    "\3\60\1\2\1\0\1\60\53\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\30\3\1\305\22\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\14\3\1\306"+
    "\36\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\31\3\1\307\21\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\14\3\1\310\36\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\3\3\1\311\47\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\7\3\1\312"+
    "\43\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\44\3\1\313\6\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\35\3\1\314\15\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\3\3\1\315\47\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\1\3\1\316"+
    "\51\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\37\3\1\317\13\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\5\3\1\320\45\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\11\3\1\321\41\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\322\3\60\1\2\1\0\1\60\53\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\3\3\1\323\47\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\10\3\1\324\42\3\10\60\2\2\7\60\1\2\1\60"+
    "\1\243\1\0\4\60\1\2\1\0\64\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\1\3\1\325\51\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\3\3\1\326"+
    "\47\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\7\3\1\327\43\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\33\3\1\330\17\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\47\3\1\331\3\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\11\3\1\332"+
    "\41\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\6\3\1\333\44\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\15\3\1\334\1\335\1\336\1\337\32\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\14\3\1\340\36\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\2\3\1\341\50\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\14\3"+
    "\1\342\36\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\14\3\1\343\36\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\3\3\1\344\47\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\22\3\1\345\30\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\7\3"+
    "\1\346\43\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\36\3\1\347\14\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\33\3\1\350\17\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\11\3\1\351\41\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\11\3"+
    "\1\352\41\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\14\3\1\353\36\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\6\3\1\354\44\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\3\3\1\355\47\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\7\3"+
    "\1\356\43\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\23\3\1\357\27\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\7\3\1\360\43\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\50\3\1\361\2\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\37\3"+
    "\1\362\13\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\15\3\1\363\35\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\7\3\1\364\43\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\33\3\1\365\17\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\1\3"+
    "\1\366\51\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\3\3\1\367\47\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\3\3\1\370\47\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\17\3\1\371\33\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\7\3"+
    "\1\372\43\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\373\3\60\1\2\1\0\1\60\53\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\5\3\1\374\45\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\44\3"+
    "\1\375\6\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\3\3\1\376\47\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\1\3\1\377\51\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\10\3\1\u0100\42\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\10\3"+
    "\1\u0101\42\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\10\3\1\u0102\42\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\3\3\1\u0103\47\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\3\3\1\u0104\47\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\11\3"+
    "\1\u0105\41\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\3\3\1\u0106\47\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\10\3\1\u0107\42\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\3\3\1\u0108\47\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\37\3"+
    "\1\u0109\13\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\47\3\1\u010a\3\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\2\3\1\u010b\50\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\17\3\1\u010c\33\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\3\3"+
    "\1\u010d\47\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\10\3\1\u010e\42\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\1\3\1\u010f\51\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\7\3\1\u0110\43\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\23\3"+
    "\1\u0111\17\3\1\u0112\7\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\44\3"+
    "\1\u0113\6\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\27\3\1\u0114\23\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\35\3\1\u0115\15\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\3\3\1\u0116\47\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\33\3"+
    "\1\u0117\17\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\11\3\1\u0118\41\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\2\3\1\u0119\50\3\10\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\1\60\11\3\1\u011a\41\3\10\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\1\60\50\3"+
    "\1\u011b\2\3\10\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\1\60\7\3\1\u011c\43\3"+
    "\10\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\1\60\52\3\1\u011d\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\3\3\1\u011e\47\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\31\3\1\u011f"+
    "\21\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\10\3\1\u0120\42\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\33\3\1\u0121\17\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\33\3\1\u0122\17\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\27\3\1\u0123"+
    "\23\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\32\3\1\u0124\20\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\1\3\1\u0125\51\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\15\3\1\u0126\35\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\3\3\1\u0127"+
    "\47\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\44\3\1\u0128\6\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\6\3\1\u0129\44\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\11\3\1\u012a\41\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\10\3\1\u012b"+
    "\42\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\2\3\1\u012c\50\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\3\3\1\u012d\47\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\5\3\1\u012e\45\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\16\3\1\u012f"+
    "\34\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\37\3\1\u0130\13\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\7\3\1\u0131\43\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\33\3\1\u0132\17\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\12\3\1\u0133"+
    "\40\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\33\3\1\u0134\17\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\3\3\1\u0135\47\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\3\3\1\u0136\47\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\44\3\1\u0137"+
    "\6\3\10\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\1\60\3\3\1\u0138\47\3\10\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\1\60\3\3\1\u0139\47\3\10\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\1\60"+
    "\14\3\1\u013a\36\3\10\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\1\60\10\3\1\u013b"+
    "\42\3\10\60\2\2\7\60";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16259];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\56\1\1\0\4\1\2\0\67\1\1\11\315\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public Symbol token(int simbolo){
		// Lexema lexema = new Lexema( yytext() );
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}
	public Symbol token(int simbolo,String componenteLexico){
		// Cup.vars++;
		// Lexema lexema = new Lexema( yytext() );
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 77: 
          { return new Symbol(sym.IsMove, yychar, yyline, yytext());
          }
        case 103: break;
        case 55: 
          { return new Symbol(sym.Text, yychar, yyline, yytext());
          }
        case 104: break;
        case 79: 
          { return new Symbol(sym.Device, yychar, yyline, yytext());
          }
        case 105: break;
        case 69: 
          { return new Symbol(sym.Close, yychar, yyline, yytext());
          }
        case 106: break;
        case 62: 
          { return new Symbol(sym.IsOut, yychar, yyline, yytext());
          }
        case 107: break;
        case 35: 
          { return new Symbol(sym.Inc, yychar, yyline, yytext());
          }
        case 108: break;
        case 70: 
          { return new Symbol(sym.Start, yychar, yyline, yytext());
          }
        case 109: break;
        case 54: 
          { return new Symbol(sym.Temp, yychar, yyline, yytext());
          }
        case 110: break;
        case 45: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 111: break;
        case 75: 
          { return new Symbol(sym.IsOpen, yychar, yyline, yytext());
          }
        case 112: break;
        case 18: 
          { return new Symbol(sym.Parentesis_der, yychar, yyline, yytext());
          }
        case 113: break;
        case 38: 
          { return new Symbol(sym.Numero_Euler_Flotante, yychar, yyline, yytext());
          }
        case 114: break;
        case 68: 
          { return new Symbol(sym.Color, yychar, yyline, yytext());
          }
        case 115: break;
        case 90: 
          { return new Symbol(sym.GetTemp, yychar, yyline, yytext());
          }
        case 116: break;
        case 74: 
          { return new Symbol(sym.Float, yychar, yyline, yytext());
          }
        case 117: break;
        case 100: 
          { return new Symbol(sym.Initialize, yychar, yyline, yytext());
          }
        case 118: break;
        case 58: 
          { return new Symbol(sym.This, yychar, yyline, yytext());
          }
        case 119: break;
        case 30: 
          { return new Symbol(sym.AsignacionArrow, yychar, yyline, yytext());
          }
        case 120: break;
        case 48: 
          { return new Symbol(sym.IsOn, yychar, yyline, yytext());
          }
        case 121: break;
        case 88: 
          { return new Symbol(sym.Display, yychar, yyline, yytext());
          }
        case 122: break;
        case 64: 
          { return new Symbol(sym.PortB, yychar, yyline, yytext());
          }
        case 123: break;
        case 87: 
          { return new Symbol(sym.Default, yychar, yyline, yytext());
          }
        case 124: break;
        case 78: 
          { return new Symbol(sym.Camera, yychar, yyline, yytext());
          }
        case 125: break;
        case 6: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 126: break;
        case 44: 
          { return new Symbol(sym.Set, yychar, yyline, yytext());
          }
        case 127: break;
        case 59: 
          { return new Symbol(sym.Lock, yychar, yyline, yytext());
          }
        case 128: break;
        case 34: 
          { return new Symbol(sym.Dec, yychar, yyline, yytext());
          }
        case 129: break;
        case 12: 
          { return new Symbol(sym.ERROR2, yychar, yyline, yytext());
          }
        case 130: break;
        case 4: 
          { /*Ignore*/
          }
        case 131: break;
        case 86: 
          { return new Symbol(sym.Program, yychar, yyline, yytext());
          }
        case 132: break;
        case 92: 
          { return new Symbol(sym.IsUnlock, yychar, yyline, yytext());
          }
        case 133: break;
        case 46: 
          { return new Symbol(sym.Home, yychar, yyline, yytext());
          }
        case 134: break;
        case 50: 
          { return new Symbol(sym.Door, yychar, yyline, yytext());
          }
        case 135: break;
        case 25: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 136: break;
        case 42: 
          { return new Symbol(sym.Off, yychar, yyline, yytext());
          }
        case 137: break;
        case 101: 
          { return new Symbol(sym.DeleteFace, yychar, yyline, yytext());
          }
        case 138: break;
        case 80: 
          { return new Symbol(sym.Enable, yychar, yyline, yytext());
          }
        case 139: break;
        case 15: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 140: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 141: break;
        case 28: 
          { return new Symbol(sym.On, yychar, yyline, yytext());
          }
        case 142: break;
        case 21: 
          { return new Symbol(sym.Llave_izq, yychar, yyline, yytext());
          }
        case 143: break;
        case 94: 
          { return new Symbol(sym.SaveFace, yychar, yyline, yytext());
          }
        case 144: break;
        case 41: 
          { return new Symbol(sym.Obj, yychar, yyline, yytext());
          }
        case 145: break;
        case 67: 
          { return new Symbol(sym.Alarm, yychar, yyline, yytext());
          }
        case 146: break;
        case 37: 
          { return new Symbol(sym.Or, yychar, yyline, yytext());
          }
        case 147: break;
        case 65: 
          { return new Symbol(sym.PortC, yychar, yyline, yytext());
          }
        case 148: break;
        case 29: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 149: break;
        case 60: 
          { return new Symbol(sym.Move, yychar, yyline, yytext());
          }
        case 150: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 151: break;
        case 24: 
          { return new Symbol(sym.Numero_Flotante, yychar, yyline, yytext());
          }
        case 152: break;
        case 51: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 153: break;
        case 40: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 154: break;
        case 53: 
          { return new Symbol(sym.Open, yychar, yyline, yytext());
          }
        case 155: break;
        case 56: 
          { return new Symbol(sym.True, yychar, yyline, yytext());
          }
        case 156: break;
        case 43: 
          { return new Symbol(sym.New, yychar, yyline, yytext());
          }
        case 157: break;
        case 23: 
          { return new Symbol(sym.ERROR3, yychar, yyline, yytext());
          }
        case 158: break;
        case 102: 
          { return new Symbol(sym.SmartCamera, yychar, yyline, yytext());
          }
        case 159: break;
        case 36: 
          { return new Symbol(sym.And, yychar, yyline, yytext());
          }
        case 160: break;
        case 13: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 161: break;
        case 47: 
          { return new Symbol(sym.IsIn, yychar, yyline, yytext());
          }
        case 162: break;
        case 97: 
          { return new Symbol(sym.UnlockAt, yychar, yyline, yytext());
          }
        case 163: break;
        case 3: 
          { return new Symbol(sym.Numero_Entero, yychar, yyline, yytext());
          }
        case 164: break;
        case 11: 
          { return new Symbol(sym.Menor, yychar, yyline, yytext());
          }
        case 165: break;
        case 98: 
          { return new Symbol(sym.LightMode, yychar, yyline, yytext());
          }
        case 166: break;
        case 93: 
          { return new Symbol(sym.Doorbell, yychar, yyline, yytext());
          }
        case 167: break;
        case 33: 
          { return new Symbol(sym.Diferente, yychar, yyline, yytext());
          }
        case 168: break;
        case 76: 
          { return new Symbol(sym.IsLock, yychar, yyline, yytext());
          }
        case 169: break;
        case 10: 
          { return new Symbol(sym.Mayor, yychar, yyline, yytext());
          }
        case 170: break;
        case 66: 
          { return new Symbol(sym.PortD, yychar, yyline, yytext());
          }
        case 171: break;
        case 8: 
          { return new Symbol(sym.Comillas_simples, yychar, yyline, yytext());
          }
        case 172: break;
        case 61: 
          { return new Symbol(sym.When, yychar, yyline, yytext());
          }
        case 173: break;
        case 99: 
          { return new Symbol(sym.FaceCheck, yychar, yyline, yytext());
          }
        case 174: break;
        case 73: 
          { return new Symbol(sym.False, yychar, yyline, yytext());
          }
        case 175: break;
        case 32: 
          { return new Symbol(sym.Mayor_igual, yychar, yyline, yytext());
          }
        case 176: break;
        case 57: 
          { return new Symbol(sym.Then, yychar, yyline, yytext());
          }
        case 177: break;
        case 26: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 178: break;
        case 82: 
          { return new Symbol(sym.LockAt, yychar, yyline, yytext());
          }
        case 179: break;
        case 22: 
          { return new Symbol(sym.Llave_der, yychar, yyline, yytext());
          }
        case 180: break;
        case 49: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 181: break;
        case 5: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 182: break;
        case 19: 
          { return new Symbol(sym.Corchete_izq, yychar, yyline, yytext());
          }
        case 183: break;
        case 16: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 184: break;
        case 95: 
          { return new Symbol(sym.Shutdown, yychar, yyline, yytext());
          }
        case 185: break;
        case 91: 
          { return new Symbol(sym.StopRec, yychar, yyline, yytext());
          }
        case 186: break;
        case 14: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 187: break;
        case 27: 
          { return new Symbol(sym.Ac, yychar, yyline, yytext());
          }
        case 188: break;
        case 83: 
          { return new Symbol(sym.Unlock, yychar, yyline, yytext());
          }
        case 189: break;
        case 7: 
          { return new Symbol(sym.PComa, yychar, yyline, yytext());
          }
        case 190: break;
        case 52: 
          { return new Symbol(sym.Room, yychar, yyline, yytext());
          }
        case 191: break;
        case 31: 
          { return new Symbol(sym.Menor_igual, yychar, yyline, yytext());
          }
        case 192: break;
        case 96: 
          { return new Symbol(sym.LightRGB, yychar, yyline, yytext());
          }
        case 193: break;
        case 84: 
          { return new Symbol(sym.Window, yychar, yyline, yytext());
          }
        case 194: break;
        case 81: 
          { return new Symbol(sym.Record, yychar, yyline, yytext());
          }
        case 195: break;
        case 17: 
          { return new Symbol(sym.Parentesis_izq, yychar, yyline, yytext());
          }
        case 196: break;
        case 63: 
          { return new Symbol(sym.PortA, yychar, yyline, yytext());
          }
        case 197: break;
        case 72: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 198: break;
        case 71: 
          { return new Symbol(sym.Light, yychar, yyline, yytext());
          }
        case 199: break;
        case 9: 
          { return new Symbol(sym.Asignacion, yychar, yyline, yytext());
          }
        case 200: break;
        case 20: 
          { return new Symbol(sym.Corchete_der, yychar, yyline, yytext());
          }
        case 201: break;
        case 85: 
          { return new Symbol(sym.IsClose, yychar, yyline, yytext());
          }
        case 202: break;
        case 89: 
          { return new Symbol(sym.Receive, yychar, yyline, yytext());
          }
        case 203: break;
        case 39: 
          { return new Symbol(sym.Numero_Euler, yychar, yyline, yytext());
          }
        case 204: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
